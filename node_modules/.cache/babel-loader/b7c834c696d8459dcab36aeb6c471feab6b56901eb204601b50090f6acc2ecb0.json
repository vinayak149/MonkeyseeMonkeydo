{"ast":null,"code":"import { clamp, getDistances, getRandom } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n  const initialPosition = particle.initialPosition,\n    {\n      dx,\n      dy\n    } = getDistances(initialPosition, particle.position),\n    dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy),\n    {\n      maxDistance\n    } = particle.retina,\n    hDistance = maxDistance.horizontal,\n    vDistance = maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    const pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -getRandom();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -getRandom();\n    }\n  }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n  applyPath(particle, delta);\n  const gravityOptions = particle.gravity,\n    gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -1 : 1;\n  if (moveDrift && moveSpeed) {\n    particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n  }\n  if (gravityOptions?.enable && moveSpeed) {\n    particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n  }\n  const decay = particle.moveDecay;\n  particle.velocity.multTo(decay);\n  const velocity = particle.velocity.mult(moveSpeed);\n  if (gravityOptions?.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n    velocity.y = gravityFactor * maxSpeed;\n    if (moveSpeed) {\n      particle.velocity.y = velocity.y / moveSpeed;\n    }\n  }\n  const zIndexOptions = particle.options.zIndex,\n    zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n  velocity.multTo(zVelocityFactor);\n  const {\n    position\n  } = particle;\n  position.addTo(velocity);\n  if (moveOptions.vibrate) {\n    position.x += Math.sin(position.x * Math.cos(position.y));\n    position.y += Math.cos(position.y * Math.sin(position.x));\n  }\n}\nexport function spin(particle, moveSpeed) {\n  const container = particle.container;\n  if (!particle.spin) {\n    return;\n  }\n  const updateFunc = {\n    x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n    y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n  };\n  particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n  particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n  particle.spin.radius += particle.spin.acceleration;\n  const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n  if (particle.spin.radius > maxCanvasSize / 2) {\n    particle.spin.radius = maxCanvasSize / 2;\n    particle.spin.acceleration *= -1;\n  } else if (particle.spin.radius < 0) {\n    particle.spin.radius = 0;\n    particle.spin.acceleration *= -1;\n  }\n  particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n  const particlesOptions = particle.options,\n    pathOptions = particlesOptions.move.path,\n    pathEnabled = pathOptions.enable;\n  if (!pathEnabled) {\n    return;\n  }\n  if (particle.lastPathTime <= particle.pathDelay) {\n    particle.lastPathTime += delta.value;\n    return;\n  }\n  const path = particle.pathGenerator?.generate(particle, delta);\n  if (path) {\n    particle.velocity.addTo(path);\n  }\n  if (pathOptions.clamp) {\n    particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n    particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n  }\n  particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n  return particle.slow.inRange ? particle.slow.factor : 1;\n}","map":{"version":3,"names":["clamp","getDistances","getRandom","applyDistance","particle","initialPosition","dx","dy","position","dxFixed","Math","abs","dyFixed","maxDistance","retina","hDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","move","moveOptions","moveSpeed","maxSpeed","moveDrift","delta","applyPath","gravityOptions","gravity","gravityFactor","enable","inverse","factor","acceleration","decay","moveDecay","multTo","mult","zIndexOptions","options","zIndex","zVelocityFactor","zIndexFactor","velocityRate","addTo","vibrate","sin","cos","spin","container","updateFunc","direction","center","radius","angle","maxCanvasSize","max","canvas","size","width","height","particlesOptions","pathOptions","path","pathEnabled","lastPathTime","pathDelay","value","pathGenerator","generate","getProximitySpeedFactor","slow","inRange"],"sources":["C:/Users/vinayak.sharma/OneDrive - Incedo Technology Solutions Ltd/Desktop/Project/node_modules/tsparticles-move-base/esm/Utils.js"],"sourcesContent":["import { clamp, getDistances, getRandom, } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -1 : 1;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > 0 &&\n        ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : 1;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}