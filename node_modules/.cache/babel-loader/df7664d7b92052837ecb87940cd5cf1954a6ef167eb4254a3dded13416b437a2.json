{"ast":null,"code":"import { ExternalInteractorBase, isInArray } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nimport { drawConnection } from \"./Utils\";\nexport class Connector extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  clear() {}\n  init() {\n    const container = this.container,\n      connect = container.actualOptions.interactivity.modes.connect;\n    if (!connect) {\n      return;\n    }\n    container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n    container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n  }\n  async interact() {\n    const container = this.container,\n      options = container.actualOptions;\n    if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n      const mousePos = container.interactivity.mouse.position;\n      if (!container.retina.connectModeDistance || container.retina.connectModeDistance < 0 || !container.retina.connectModeRadius || container.retina.connectModeRadius < 0 || !mousePos) {\n        return;\n      }\n      const distance = Math.abs(container.retina.connectModeRadius),\n        query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n      let i = 0;\n      for (const p1 of query) {\n        const pos1 = p1.getPosition();\n        for (const p2 of query.slice(i + 1)) {\n          const pos2 = p2.getPosition(),\n            distMax = Math.abs(container.retina.connectModeDistance),\n            xDiff = Math.abs(pos1.x - pos2.x),\n            yDiff = Math.abs(pos1.y - pos2.y);\n          if (xDiff < distMax && yDiff < distMax) {\n            drawConnection(container, p1, p2);\n          }\n        }\n        ++i;\n      }\n    }\n  }\n  isEnabled(particle) {\n    const container = this.container,\n      mouse = container.interactivity.mouse,\n      events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n    return isInArray(\"connect\", events.onHover.mode);\n  }\n  loadModeOptions(options, ...sources) {\n    if (!options.connect) {\n      options.connect = new Connect();\n    }\n    for (const source of sources) {\n      options.connect.load(source?.connect);\n    }\n  }\n  reset() {}\n}","map":{"version":3,"names":["ExternalInteractorBase","isInArray","Connect","drawConnection","Connector","constructor","container","clear","init","connect","actualOptions","interactivity","modes","retina","connectModeDistance","distance","pixelRatio","connectModeRadius","radius","interact","options","events","onHover","enable","status","mousePos","mouse","position","Math","abs","query","particles","quadTree","queryCircle","p","isEnabled","i","p1","pos1","getPosition","p2","slice","pos2","distMax","xDiff","x","yDiff","y","particle","mode","loadModeOptions","sources","source","load","reset"],"sources":["C:/Users/vinayak.sharma/OneDrive - Incedo Technology Solutions Ltd/Desktop/Project/node_modules/tsparticles-interaction-external-connect/esm/Connector.js"],"sourcesContent":["import { ExternalInteractorBase, isInArray, } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nimport { drawConnection } from \"./Utils\";\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!container.retina.connectModeDistance ||\n                container.retina.connectModeDistance < 0 ||\n                !container.retina.connectModeRadius ||\n                container.retina.connectModeRadius < 0 ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,EAAEC,SAAS,QAAS,oBAAoB;AACvE,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,cAAc,QAAQ,SAAS;AACxC,OAAO,MAAMC,SAAS,SAASJ,sBAAsB,CAAC;EAClDK,WAAWA,CAACC,SAAS,EAAE;IACnB,KAAK,CAACA,SAAS,CAAC;EACpB;EACAC,KAAKA,CAAA,EAAG,CACR;EACAC,IAAIA,CAAA,EAAG;IACH,MAAMF,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEG,OAAO,GAAGH,SAAS,CAACI,aAAa,CAACC,aAAa,CAACC,KAAK,CAACH,OAAO;IAC/F,IAAI,CAACA,OAAO,EAAE;MACV;IACJ;IACAH,SAAS,CAACO,MAAM,CAACC,mBAAmB,GAAGL,OAAO,CAACM,QAAQ,GAAGT,SAAS,CAACO,MAAM,CAACG,UAAU;IACrFV,SAAS,CAACO,MAAM,CAACI,iBAAiB,GAAGR,OAAO,CAACS,MAAM,GAAGZ,SAAS,CAACO,MAAM,CAACG,UAAU;EACrF;EACA,MAAMG,QAAQA,CAAA,EAAG;IACb,MAAMb,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEc,OAAO,GAAGd,SAAS,CAACI,aAAa;IACnE,IAAIU,OAAO,CAACT,aAAa,CAACU,MAAM,CAACC,OAAO,CAACC,MAAM,IAAIjB,SAAS,CAACK,aAAa,CAACa,MAAM,KAAK,aAAa,EAAE;MACjG,MAAMC,QAAQ,GAAGnB,SAAS,CAACK,aAAa,CAACe,KAAK,CAACC,QAAQ;MACvD,IAAI,CAACrB,SAAS,CAACO,MAAM,CAACC,mBAAmB,IACrCR,SAAS,CAACO,MAAM,CAACC,mBAAmB,GAAG,CAAC,IACxC,CAACR,SAAS,CAACO,MAAM,CAACI,iBAAiB,IACnCX,SAAS,CAACO,MAAM,CAACI,iBAAiB,GAAG,CAAC,IACtC,CAACQ,QAAQ,EAAE;QACX;MACJ;MACA,MAAMV,QAAQ,GAAGa,IAAI,CAACC,GAAG,CAACvB,SAAS,CAACO,MAAM,CAACI,iBAAiB,CAAC;QAAEa,KAAK,GAAGxB,SAAS,CAACyB,SAAS,CAACC,QAAQ,CAACC,WAAW,CAACR,QAAQ,EAAEV,QAAQ,EAAGmB,CAAC,IAAK,IAAI,CAACC,SAAS,CAACD,CAAC,CAAC,CAAC;MAC7J,IAAIE,CAAC,GAAG,CAAC;MACT,KAAK,MAAMC,EAAE,IAAIP,KAAK,EAAE;QACpB,MAAMQ,IAAI,GAAGD,EAAE,CAACE,WAAW,CAAC,CAAC;QAC7B,KAAK,MAAMC,EAAE,IAAIV,KAAK,CAACW,KAAK,CAACL,CAAC,GAAG,CAAC,CAAC,EAAE;UACjC,MAAMM,IAAI,GAAGF,EAAE,CAACD,WAAW,CAAC,CAAC;YAAEI,OAAO,GAAGf,IAAI,CAACC,GAAG,CAACvB,SAAS,CAACO,MAAM,CAACC,mBAAmB,CAAC;YAAE8B,KAAK,GAAGhB,IAAI,CAACC,GAAG,CAACS,IAAI,CAACO,CAAC,GAAGH,IAAI,CAACG,CAAC,CAAC;YAAEC,KAAK,GAAGlB,IAAI,CAACC,GAAG,CAACS,IAAI,CAACS,CAAC,GAAGL,IAAI,CAACK,CAAC,CAAC;UAC7J,IAAIH,KAAK,GAAGD,OAAO,IAAIG,KAAK,GAAGH,OAAO,EAAE;YACpCxC,cAAc,CAACG,SAAS,EAAE+B,EAAE,EAAEG,EAAE,CAAC;UACrC;QACJ;QACA,EAAEJ,CAAC;MACP;IACJ;EACJ;EACAD,SAASA,CAACa,QAAQ,EAAE;IAChB,MAAM1C,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEoB,KAAK,GAAGpB,SAAS,CAACK,aAAa,CAACe,KAAK;MAAEL,MAAM,GAAG,CAAC2B,QAAQ,EAAErC,aAAa,IAAIL,SAAS,CAACI,aAAa,CAACC,aAAa,EAAEU,MAAM;IAC3J,IAAI,EAAEA,MAAM,CAACC,OAAO,CAACC,MAAM,IAAIG,KAAK,CAACC,QAAQ,CAAC,EAAE;MAC5C,OAAO,KAAK;IAChB;IACA,OAAO1B,SAAS,CAAC,SAAS,EAAEoB,MAAM,CAACC,OAAO,CAAC2B,IAAI,CAAC;EACpD;EACAC,eAAeA,CAAC9B,OAAO,EAAE,GAAG+B,OAAO,EAAE;IACjC,IAAI,CAAC/B,OAAO,CAACX,OAAO,EAAE;MAClBW,OAAO,CAACX,OAAO,GAAG,IAAIP,OAAO,CAAC,CAAC;IACnC;IACA,KAAK,MAAMkD,MAAM,IAAID,OAAO,EAAE;MAC1B/B,OAAO,CAACX,OAAO,CAAC4C,IAAI,CAACD,MAAM,EAAE3C,OAAO,CAAC;IACzC;EACJ;EACA6C,KAAKA,CAAA,EAAG,CACR;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}