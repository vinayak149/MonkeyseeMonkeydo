{"ast":null,"code":"import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n  constructor(engine, container) {\n    super(container);\n    this._clickAttract = () => {\n      const container = this.container;\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n      const {\n        attract\n      } = container;\n      if (!attract.finish) {\n        if (!attract.count) {\n          attract.count = 0;\n        }\n        attract.count++;\n        if (attract.count === container.particles.count) {\n          attract.finish = true;\n        }\n      }\n      if (attract.clicking) {\n        const mousePos = container.interactivity.mouse.clickPosition,\n          attractRadius = container.retina.attractModeDistance;\n        if (!attractRadius || attractRadius < 0 || !mousePos) {\n          return;\n        }\n        this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n      } else if (attract.clicking === false) {\n        attract.particles = [];\n      }\n      return;\n    };\n    this._hoverAttract = () => {\n      const container = this.container,\n        mousePos = container.interactivity.mouse.position,\n        attractRadius = container.retina.attractModeDistance;\n      if (!attractRadius || attractRadius < 0 || !mousePos) {\n        return;\n      }\n      this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    };\n    this._processAttract = (position, attractRadius, area) => {\n      const container = this.container,\n        attractOptions = container.actualOptions.interactivity.modes.attract;\n      if (!attractOptions) {\n        return;\n      }\n      const query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n      for (const particle of query) {\n        const {\n          dx,\n          dy,\n          distance\n        } = getDistances(particle.position, position);\n        const velocity = attractOptions.speed * attractOptions.factor;\n        const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n        const normVec = Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n        particle.position.subFrom(normVec);\n      }\n    };\n    this._engine = engine;\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions,\n        attract = options.interactivity.modes.attract;\n      if (!attract || mode !== \"attract\") {\n        return;\n      }\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n      container.attract.clicking = true;\n      container.attract.count = 0;\n      for (const particle of container.attract.particles) {\n        if (!this.isEnabled(particle)) {\n          continue;\n        }\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n      container.attract.particles = [];\n      container.attract.finish = false;\n      setTimeout(() => {\n        if (container.destroyed) {\n          return;\n        }\n        if (!container.attract) {\n          container.attract = {\n            particles: []\n          };\n        }\n        container.attract.clicking = false;\n      }, attract.duration * 1000);\n    };\n  }\n  clear() {}\n  init() {\n    const container = this.container,\n      attract = container.actualOptions.interactivity.modes.attract;\n    if (!attract) {\n      return;\n    }\n    container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n  }\n  async interact() {\n    const container = this.container,\n      options = container.actualOptions,\n      mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n      events = options.interactivity.events,\n      hoverEnabled = events.onHover.enable,\n      hoverMode = events.onHover.mode,\n      clickEnabled = events.onClick.enable,\n      clickMode = events.onClick.mode;\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n      this._hoverAttract();\n    } else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n      this._clickAttract();\n    }\n  }\n  isEnabled(particle) {\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = (particle?.interactivity ?? options.interactivity).events;\n    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n      return false;\n    }\n    const hoverMode = events.onHover.mode,\n      clickMode = events.onClick.mode;\n    return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n  }\n  loadModeOptions(options, ...sources) {\n    if (!options.attract) {\n      options.attract = new Attract();\n    }\n    for (const source of sources) {\n      options.attract.load(source?.attract);\n    }\n  }\n  reset() {}\n}","map":{"version":3,"names":["Circle","ExternalInteractorBase","Vector","clamp","getDistances","getEasing","isInArray","mouseMoveEvent","Attract","Attractor","constructor","engine","container","_clickAttract","attract","particles","finish","count","clicking","mousePos","interactivity","mouse","clickPosition","attractRadius","retina","attractModeDistance","_processAttract","x","y","_hoverAttract","position","area","attractOptions","actualOptions","modes","query","quadTree","p","isEnabled","particle","dx","dy","distance","velocity","speed","factor","attractFactor","easing","maxSpeed","normVec","create","subFrom","_engine","handleClickMode","mode","options","setTo","initialVelocity","setTimeout","destroyed","duration","clear","init","pixelRatio","interact","mouseMoveStatus","status","events","hoverEnabled","onHover","enable","hoverMode","clickEnabled","onClick","clickMode","loadModeOptions","sources","source","load","reset"],"sources":["C:/Users/vinayak.sharma/OneDrive - Incedo Technology Solutions Ltd/Desktop/Project/node_modules/tsparticles-interaction-external-attract/esm/Attractor.js"],"sourcesContent":["import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickAttract = () => {\n            const container = this.container;\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            const { attract } = container;\n            if (!attract.finish) {\n                if (!attract.count) {\n                    attract.count = 0;\n                }\n                attract.count++;\n                if (attract.count === container.particles.count) {\n                    attract.finish = true;\n                }\n            }\n            if (attract.clicking) {\n                const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n                if (!attractRadius || attractRadius < 0 || !mousePos) {\n                    return;\n                }\n                this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n            }\n            else if (attract.clicking === false) {\n                attract.particles = [];\n            }\n            return;\n        };\n        this._hoverAttract = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n            if (!attractRadius || attractRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        };\n        this._processAttract = (position, attractRadius, area) => {\n            const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract;\n            if (!attractOptions) {\n                return;\n            }\n            const query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position);\n                const velocity = attractOptions.speed * attractOptions.factor;\n                const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n                const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n                particle.position.subFrom(normVec);\n            }\n        };\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this._hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this._clickAttract();\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}