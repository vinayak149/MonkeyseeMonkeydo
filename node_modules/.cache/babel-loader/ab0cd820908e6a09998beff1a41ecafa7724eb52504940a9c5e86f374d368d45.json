{"ast":null,"code":"import { getLogger, getPosition } from \"../Utils/Utils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { errorPrefix } from \"./Utils/Constants\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = canvasSize => {\n  return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2);\n};\nexport class Particles {\n  constructor(engine, container) {\n    this._applyDensity = (options, manualCount, group) => {\n      if (!options.number.density?.enable) {\n        return;\n      }\n      const numberOptions = options.number,\n        densityFactor = this._initDensityFactor(numberOptions.density),\n        optParticlesNumber = numberOptions.value,\n        optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n        particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n        particlesCount = Math.min(this.count, this.filter(t => t.group === group).length);\n      this.limit = numberOptions.limit * densityFactor;\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    };\n    this._initDensityFactor = densityOptions => {\n      const container = this._container;\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n      const canvas = container.canvas.element,\n        pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    };\n    this._pushParticle = (position, overrideOptions, group, initializer) => {\n      try {\n        let particle = this.pool.pop();\n        if (particle) {\n          particle.init(this._nextId, position, overrideOptions, group);\n        } else {\n          particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n        }\n        let canAdd = true;\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n        if (!canAdd) {\n          return;\n        }\n        this._array.push(particle);\n        this._zArray.push(particle);\n        this._nextId++;\n        this._engine.dispatchEvent(\"particleAdded\", {\n          container: this._container,\n          data: {\n            particle\n          }\n        });\n        return particle;\n      } catch (e) {\n        getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n        return;\n      }\n    };\n    this._removeParticle = (index, group, override) => {\n      const particle = this._array[index];\n      if (!particle || particle.group !== group) {\n        return false;\n      }\n      particle.destroy(override);\n      const zIdx = this._zArray.indexOf(particle);\n      this._array.splice(index, 1);\n      this._zArray.splice(zIdx, 1);\n      this.pool.push(particle);\n      this._engine.dispatchEvent(\"particleRemoved\", {\n        container: this._container,\n        data: {\n          particle\n        }\n      });\n      return true;\n    };\n    this._engine = engine;\n    this._container = container;\n    this._nextId = 0;\n    this._array = [];\n    this._zArray = [];\n    this.pool = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this._interactionManager = new InteractionManager(engine, container);\n    const canvasSize = container.canvas.size;\n    this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n    this.movers = this._engine.plugins.getMovers(container, true);\n    this.updaters = this._engine.plugins.getUpdaters(container, true);\n  }\n  get count() {\n    return this._array.length;\n  }\n  addManualParticles() {\n    const container = this._container,\n      options = container.actualOptions;\n    for (const particle of options.manualParticles) {\n      this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n    }\n  }\n  addParticle(position, overrideOptions, group, initializer) {\n    const container = this._container,\n      options = container.actualOptions,\n      limit = options.particles.number.limit;\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n    return this._pushParticle(position, overrideOptions, group, initializer);\n  }\n  clear() {\n    this._array = [];\n    this._zArray = [];\n  }\n  destroy() {\n    this._array = [];\n    this._zArray = [];\n    this.movers = [];\n    this.updaters = [];\n  }\n  async draw(delta) {\n    const container = this._container;\n    container.canvas.clear();\n    await this.update(delta);\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n    for (const p of this._zArray) {\n      p.draw(delta);\n    }\n  }\n  filter(condition) {\n    return this._array.filter(condition);\n  }\n  find(condition) {\n    return this._array.find(condition);\n  }\n  handleClickMode(mode) {\n    this._interactionManager.handleClickMode(mode);\n  }\n  init() {\n    const container = this._container,\n      options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    let handled = false;\n    this.updaters = this._engine.plugins.getUpdaters(container, true);\n    this._interactionManager.init();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n      if (handled) {\n        break;\n      }\n    }\n    this._interactionManager.init();\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.init(container);\n    }\n    this.addManualParticles();\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n        for (let i = this.count, j = 0; j < groupOptions.number?.value && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n  }\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse?.position, overrideOptions, group);\n    }\n    this.pushing = false;\n  }\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n  remove(particle, group, override) {\n    this.removeAt(this._array.indexOf(particle), undefined, group, override);\n  }\n  removeAt(index, quantity = 1, group, override) {\n    if (index < 0 || index > this.count) {\n      return;\n    }\n    let deleted = 0;\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      this._removeParticle(i--, group, override) && deleted++;\n    }\n  }\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n  setDensity() {\n    const options = this._container.actualOptions,\n      groups = options.particles.groups;\n    for (const group in groups) {\n      this._applyDensity(groups[group], 0, group);\n    }\n    this._applyDensity(options.particles, options.manualParticles.length);\n  }\n  async update(delta) {\n    const container = this._container,\n      particlesToDelete = new Set();\n    this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.update();\n    }\n    for (const [, plugin] of container.plugins) {\n      plugin.update && plugin.update(delta);\n    }\n    for (const particle of this._array) {\n      const resizeFactor = container.canvas.resizeFactor;\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n        particle.initialPosition.x *= resizeFactor.width;\n        particle.initialPosition.y *= resizeFactor.height;\n      }\n      particle.ignoresResizeRatio = false;\n      await this._interactionManager.reset(particle);\n      for (const [, plugin] of this._container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n      for (const mover of this.movers) {\n        mover.isEnabled(particle) && mover.move(particle, delta);\n      }\n      if (particle.destroyed) {\n        particlesToDelete.add(particle);\n        continue;\n      }\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n    if (particlesToDelete.size) {\n      const checkDelete = p => !particlesToDelete.has(p);\n      this._array = this.filter(checkDelete);\n      this._zArray = this._zArray.filter(checkDelete);\n      this.pool.push(...particlesToDelete);\n    }\n    await this._interactionManager.externalInteract(delta);\n    for (const particle of this._array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n      if (!particle.destroyed && !particle.spawning) {\n        await this._interactionManager.particlesInteract(particle, delta);\n      }\n    }\n    delete container.canvas.resizeFactor;\n    if (this.needsSort) {\n      const zArray = this._zArray;\n      zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = zArray[zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n  }\n}","map":{"version":3,"names":["getLogger","getPosition","InteractionManager","Particle","Point","QuadTree","Rectangle","errorPrefix","qTreeCapacity","qTreeRectangle","canvasSize","width","height","Particles","constructor","engine","container","_applyDensity","options","manualCount","group","number","density","enable","numberOptions","densityFactor","_initDensityFactor","optParticlesNumber","value","optParticlesLimit","limit","particlesNumber","Math","min","particlesCount","count","filter","t","length","push","abs","undefined","removeQuantity","densityOptions","_container","canvas","element","pxRatio","retina","pixelRatio","factor","area","_pushParticle","position","overrideOptions","initializer","particle","pool","pop","init","_nextId","_engine","canAdd","_array","_zArray","dispatchEvent","data","e","warning","_removeParticle","index","override","destroy","zIdx","indexOf","splice","needsSort","lastZIndex","_interactionManager","size","quadTree","movers","plugins","getMovers","updaters","getUpdaters","addManualParticles","actualOptions","manualParticles","addParticle","particles","countToRemove","clear","draw","delta","update","plugin","drawPlugin","p","condition","find","handleClickMode","mode","handled","particlesInitialization","pathGenerator","pathGenerators","groups","groupOptions","i","j","nb","mouse","pushing","redraw","remove","removeAt","quantity","deleted","setDensity","particlesToDelete","Set","resizeFactor","ignoresResizeRatio","x","y","initialPosition","reset","destroyed","particleUpdate","mover","isEnabled","move","add","insert","checkDelete","has","externalInteract","updater","spawning","particlesInteract","zArray","sort","a","b","z","id"],"sources":["C:/Users/vinayak.sharma/OneDrive - Incedo Technology Solutions Ltd/Desktop/Project/node_modules/tsparticles-engine/esm/Core/Particles.js"],"sourcesContent":["import { getLogger, getPosition } from \"../Utils/Utils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { errorPrefix } from \"./Utils/Constants\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = (canvasSize) => {\n    return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._applyDensity = (options, manualCount, group) => {\n            if (!options.number.density?.enable) {\n                return;\n            }\n            const numberOptions = options.number, densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t) => t.group === group).length);\n            this.limit = numberOptions.limit * densityFactor;\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return 1;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this.pool.pop();\n                if (particle) {\n                    particle.init(this._nextId, position, overrideOptions, group);\n                }\n                else {\n                    particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n                }\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n                return;\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            particle.destroy(override);\n            const zIdx = this._zArray.indexOf(particle);\n            this._array.splice(index, 1);\n            this._zArray.splice(zIdx, 1);\n            this.pool.push(particle);\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this.pool = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = this._engine.plugins.getMovers(container, true);\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const container = this._container, options = container.actualOptions, limit = options.particles.number.limit;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this._container;\n        container.canvas.clear();\n        await this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    init() {\n        const container = this._container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n        this._interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            this._removeParticle(i--, group, override) && deleted++;\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.update && plugin.update(delta);\n        }\n        for (const particle of this._array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            for (const mover of this.movers) {\n                mover.isEnabled(particle) && mover.move(particle, delta);\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            this.pool.push(...particlesToDelete);\n        }\n        await this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n        if (this.needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = zArray[zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}