{"ast":null,"code":"import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { errorPrefix } from \"./Utils/Constants\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = data => {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n  const diameter = data.radius * 2;\n  if (data.coord > data.maxCoord - diameter) {\n    data.setCb(-data.radius);\n  } else if (data.coord < diameter) {\n    data.setCb(data.radius);\n  }\n};\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    this.container = container;\n    this._calcPosition = (container, position, zIndex, tryCount = 0) => {\n      for (const [, plugin] of container.plugins) {\n        const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n        if (pluginPos) {\n          return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n        }\n      }\n      const canvasSize = container.canvas.size,\n        exactPosition = calcExactPositionOrRandomFromSize({\n          size: canvasSize,\n          position: position\n        }),\n        pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n        radius = this.getRadius(),\n        outModes = this.options.move.outModes,\n        fixHorizontal = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [\"bounce\", \"bounce-horizontal\"],\n            coord: pos.x,\n            maxCoord: container.canvas.size.width,\n            setCb: value => pos.x += value,\n            radius\n          });\n        },\n        fixVertical = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [\"bounce\", \"bounce-vertical\"],\n            coord: pos.y,\n            maxCoord: container.canvas.size.height,\n            setCb: value => pos.y += value,\n            radius\n          });\n        };\n      fixHorizontal(outModes.left ?? outModes.default);\n      fixHorizontal(outModes.right ?? outModes.default);\n      fixVertical(outModes.top ?? outModes.default);\n      fixVertical(outModes.bottom ?? outModes.default);\n      if (this._checkOverlap(pos, tryCount)) {\n        return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n      return pos;\n    };\n    this._calculateVelocity = () => {\n      const baseVelocity = getParticleBaseVelocity(this.direction),\n        res = baseVelocity.copy(),\n        moveOptions = this.options.move;\n      if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n        return res;\n      }\n      const rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n        radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n        range = {\n          left: radOffset - rad / 2,\n          right: radOffset + rad / 2\n        };\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n      return res;\n    };\n    this._checkOverlap = (pos, tryCount = 0) => {\n      const collisionsOptions = this.options.collisions,\n        radius = this.getRadius();\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n      const overlapOptions = collisionsOptions.overlap;\n      if (overlapOptions.enable) {\n        return false;\n      }\n      const retries = overlapOptions.retries;\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n      }\n      return !!this.container.particles.find(particle => getDistance(pos, particle.position) < radius + particle.getRadius());\n    };\n    this._getRollColor = color => {\n      if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n        return color;\n      }\n      const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n        backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n        rolled = Math.floor(((this.roll.angle ?? 0) + backSum) / (Math.PI / backFactor)) % 2;\n      if (!rolled) {\n        return color;\n      }\n      if (this.backColor) {\n        return this.backColor;\n      }\n      if (this.roll.alter) {\n        return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n      }\n      return color;\n    };\n    this._initPosition = position => {\n      const container = this.container,\n        zIndexValue = getRangeValue(this.options.zIndex.value);\n      this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n      this.initialPosition = this.position.copy();\n      const canvasSize = container.canvas.size;\n      this.moveCenter = {\n        ...getPosition(this.options.move.center, canvasSize),\n        radius: this.options.move.center.radius ?? 0,\n        mode: this.options.move.center.mode ?? \"percent\"\n      };\n      this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n      switch (this.options.move.direction) {\n        case \"inside\":\n          this.outType = \"inside\";\n          break;\n        case \"outside\":\n          this.outType = \"outside\";\n          break;\n      }\n      this.offset = Vector.origin;\n    };\n    this._loadShapeData = (shapeOptions, reduceDuplicates) => {\n      const shapeData = shapeOptions.options[this.shape];\n      if (!shapeData) {\n        return;\n      }\n      return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill\n      }, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n    };\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n  destroy(override) {\n    if (this.unbreakable || this.destroyed) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.slow.inRange = false;\n    const container = this.container,\n      pathGenerator = this.pathGenerator;\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n    for (const updater of container.particles.updaters) {\n      if (updater.particleDestroyed) {\n        updater.particleDestroyed(this, override);\n      }\n    }\n    if (pathGenerator) {\n      pathGenerator.reset(this);\n    }\n  }\n  draw(delta) {\n    const container = this.container;\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    container.canvas.drawParticle(this, delta);\n  }\n  getFillColor() {\n    return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n  }\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    return this.bubble.radius ?? this.size.value;\n  }\n  getStrokeColor() {\n    return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n  }\n  init(id, position, overrideOptions, group) {\n    const container = this.container,\n      engine = this._engine;\n    this.id = id;\n    this.group = group;\n    this.fill = true;\n    this.pathRotation = false;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.rotation = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = \"normal\";\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n      mainOptions = container.actualOptions,\n      particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n      shapeType = particlesOptions.shape.type,\n      {\n        reduceDuplicates\n      } = particlesOptions;\n    this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n    const shapeOptions = particlesOptions.shape;\n    if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n      const overrideShapeType = overrideOptions.shape.type,\n        shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n      if (shape) {\n        this.shape = shape;\n        shapeOptions.load(overrideOptions.shape);\n      }\n    }\n    this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n    particlesOptions.load(overrideOptions);\n    const shapeData = this.shapeData;\n    if (shapeData) {\n      particlesOptions.load(shapeData.particles);\n    }\n    const interactivity = new Interactivity(engine, container);\n    interactivity.load(container.actualOptions.interactivity);\n    interactivity.load(particlesOptions.interactivity);\n    this.interactivity = interactivity;\n    this.fill = shapeData?.fill ?? particlesOptions.shape.fill;\n    this.close = shapeData?.close ?? particlesOptions.shape.close;\n    this.options = particlesOptions;\n    const pathOptions = this.options.move.path;\n    this.pathDelay = getValue(pathOptions.delay) * 1000;\n    if (pathOptions.generator) {\n      this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n      if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n        this.pathGenerator.init(container);\n      }\n    }\n    container.retina.initParticle(this);\n    this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n    this.bubble = {\n      inRange: false\n    };\n    this.slow = {\n      inRange: false,\n      factor: 1\n    };\n    this._initPosition(position);\n    this.initialVelocity = this._calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = this._engine.plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    if (drawer && drawer.loadShape) {\n      drawer.loadShape(this);\n    }\n    const sideCountFunc = drawer?.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.spawning = false;\n    this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n    for (const updater of container.particles.updaters) {\n      updater.init(this);\n    }\n    for (const mover of container.particles.movers) {\n      mover.init && mover.init(this);\n    }\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n    for (const [, plugin] of container.plugins) {\n      plugin.particleCreated && plugin.particleCreated(this);\n    }\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n      canvasSize = this.container.canvas.size,\n      position = this.position;\n    return position.x >= -radius && position.y >= -radius && position.y <= canvasSize.height + radius && position.x <= canvasSize.width + radius;\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  reset() {\n    for (const updater of this.container.particles.updaters) {\n      updater.reset && updater.reset(this);\n    }\n  }\n}","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","getPosition","initParticleNumericAnimationValue","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","errorPrefix","loadParticlesOptions","fixOutMode","data","outMode","checkModes","diameter","radius","coord","maxCoord","setCb","Particle","constructor","engine","id","container","position","overrideOptions","group","_calcPosition","zIndex","tryCount","plugin","plugins","pluginPos","particlePosition","undefined","create","x","y","canvasSize","canvas","size","exactPosition","pos","getRadius","outModes","options","move","fixHorizontal","width","value","fixVertical","height","left","default","right","top","bottom","_checkOverlap","_calculateVelocity","baseVelocity","direction","res","copy","moveOptions","rad","Math","PI","angle","radOffset","offset","range","straight","random","speed","length","collisionsOptions","collisions","enable","overlapOptions","overlap","retries","Error","particles","find","particle","_getRollColor","color","roll","backColor","alter","backFactor","horizontal","vertical","backSum","rolled","floor","type","_initPosition","zIndexValue","zLayers","initialPosition","moveCenter","center","mode","outType","origin","_loadShapeData","shapeOptions","reduceDuplicates","shapeData","shape","close","fill","_engine","init","destroy","override","unbreakable","destroyed","bubble","inRange","slow","pathGenerator","particleDestroyed","updater","updaters","reset","draw","delta","drawParticlePlugin","drawParticle","getFillColor","getMass","z","getStrokeColor","strokeColor","pathRotation","lastPathTime","rotation","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","shapeType","overrideShapeType","load","interactivity","pathOptions","path","pathDelay","delay","generator","getPathGenerator","addPath","initParticle","factor","initialVelocity","velocity","moveDecay","decay","needsSort","lastZIndex","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","mover","movers","particleInit","particleCreated","isInsideCanvas","isVisible"],"sources":["C:/Users/vinayak.sharma/OneDrive - Incedo Technology Solutions Ltd/Desktop/Project/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { errorPrefix } from \"./Utils/Constants\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * 2;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = 0) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\", \"bounce-horizontal\"],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\", \"bounce-vertical\"],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n                return res;\n            }\n            const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n                left: radOffset - rad / 2,\n                right: radOffset + rad / 2,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = 0) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color) => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor(((this.roll.angle ?? 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position) => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value);\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? 0,\n                mode: this.options.move.center.mode ?? \"percent\",\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case \"inside\":\n                    this.outType = \"inside\";\n                    break;\n                case \"outside\":\n                    this.outType = \"outside\";\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._loadShapeData = (shapeOptions, reduceDuplicates) => {\n            const shapeData = shapeOptions.options[this.shape];\n            if (!shapeData) {\n                return;\n            }\n            return deepExtend({\n                close: shapeOptions.close,\n                fill: shapeOptions.fill,\n            }, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        };\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n        if (pathGenerator) {\n            pathGenerator.reset(this);\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const shapeOptions = particlesOptions.shape;\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n            }\n        }\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.fill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.close = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer && drawer.loadShape) {\n            drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of container.particles.movers) {\n            mover.init && mover.init(this);\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated && plugin.particleCreated(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset && updater.reset(this);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}