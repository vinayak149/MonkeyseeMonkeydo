{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\nimport { calculateBubbleValue } from \"./Utils\";\nexport class Bubbler extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n    this._clickBubble = () => {\n      const container = this.container,\n        options = container.actualOptions,\n        mouseClickPos = container.interactivity.mouse.clickPosition,\n        bubbleOptions = options.interactivity.modes.bubble;\n      if (!bubbleOptions || !mouseClickPos) {\n        return;\n      }\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n      const distance = container.retina.bubbleModeDistance;\n      if (!distance || distance < 0) {\n        return;\n      }\n      const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, p => this.isEnabled(p)),\n        {\n          bubble\n        } = container;\n      for (const particle of query) {\n        if (!bubble.clicking) {\n          continue;\n        }\n        particle.bubble.inRange = !bubble.durationEnd;\n        const pos = particle.getPosition(),\n          distMouse = getDistance(pos, mouseClickPos),\n          timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n        if (timeSpent > bubbleOptions.duration) {\n          bubble.durationEnd = true;\n        }\n        if (timeSpent > bubbleOptions.duration * 2) {\n          bubble.clicking = false;\n          bubble.durationEnd = false;\n        }\n        const sizeData = {\n          bubbleObj: {\n            optValue: container.retina.bubbleModeSize,\n            value: particle.bubble.radius\n          },\n          particlesObj: {\n            optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n            value: particle.size.value\n          },\n          type: \"size\"\n        };\n        this._process(particle, distMouse, timeSpent, sizeData);\n        const opacityData = {\n          bubbleObj: {\n            optValue: bubbleOptions.opacity,\n            value: particle.bubble.opacity\n          },\n          particlesObj: {\n            optValue: getRangeMax(particle.options.opacity.value),\n            value: particle.opacity?.value ?? 1\n          },\n          type: \"opacity\"\n        };\n        this._process(particle, distMouse, timeSpent, opacityData);\n        if (!bubble.durationEnd && distMouse <= distance) {\n          this._hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      }\n    };\n    this._hoverBubble = () => {\n      const container = this.container,\n        mousePos = container.interactivity.mouse.position,\n        distance = container.retina.bubbleModeDistance;\n      if (!distance || distance < 0 || mousePos === undefined) {\n        return;\n      }\n      const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n      for (const particle of query) {\n        particle.bubble.inRange = true;\n        const pos = particle.getPosition(),\n          pointDistance = getDistance(pos, mousePos),\n          ratio = 1 - pointDistance / distance;\n        if (pointDistance <= distance) {\n          if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n            this._hoverBubbleSize(particle, ratio);\n            this._hoverBubbleOpacity(particle, ratio);\n            this._hoverBubbleColor(particle, ratio);\n          }\n        } else {\n          this.reset(particle);\n        }\n        if (container.interactivity.status === mouseLeaveEvent) {\n          this.reset(particle);\n        }\n      }\n    };\n    this._hoverBubbleColor = (particle, ratio, divBubble) => {\n      const options = this.container.actualOptions,\n        bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n      if (!bubbleOptions) {\n        return;\n      }\n      if (!particle.bubble.finalColor) {\n        const modeColor = bubbleOptions.color;\n        if (!modeColor) {\n          return;\n        }\n        const bubbleColor = itemFromSingleOrMultiple(modeColor);\n        particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n      }\n      if (!particle.bubble.finalColor) {\n        return;\n      }\n      if (bubbleOptions.mix) {\n        particle.bubble.color = undefined;\n        const pColor = particle.getFillColor();\n        particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n      } else {\n        particle.bubble.color = particle.bubble.finalColor;\n      }\n    };\n    this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n      const container = this.container,\n        options = container.actualOptions,\n        modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n      if (!modeOpacity) {\n        return;\n      }\n      const optOpacity = particle.options.opacity.value,\n        pOpacity = particle.opacity?.value ?? 1,\n        opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n      if (opacity !== undefined) {\n        particle.bubble.opacity = opacity;\n      }\n    };\n    this._hoverBubbleSize = (particle, ratio, divBubble) => {\n      const container = this.container,\n        modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n      if (modeSize === undefined) {\n        return;\n      }\n      const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n        pSize = particle.size.value,\n        size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n      if (size !== undefined) {\n        particle.bubble.radius = size;\n      }\n    };\n    this._process = (particle, distMouse, timeSpent, data) => {\n      const container = this.container,\n        bubbleParam = data.bubbleObj.optValue,\n        options = container.actualOptions,\n        bubbleOptions = options.interactivity.modes.bubble;\n      if (!bubbleOptions || bubbleParam === undefined) {\n        return;\n      }\n      const bubbleDuration = bubbleOptions.duration,\n        bubbleDistance = container.retina.bubbleModeDistance,\n        particlesParam = data.particlesObj.optValue,\n        pObjBubble = data.bubbleObj.value,\n        pObj = data.particlesObj.value || 0,\n        type = data.type;\n      if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n        return;\n      }\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n      if (container.bubble.durationEnd) {\n        if (pObjBubble) {\n          if (type === \"size\") {\n            delete particle.bubble.radius;\n          }\n          if (type === \"opacity\") {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else {\n        if (distMouse <= bubbleDistance) {\n          const obj = pObjBubble ?? pObj;\n          if (obj !== bubbleParam) {\n            const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n            if (type === \"size\") {\n              particle.bubble.radius = value;\n            }\n            if (type === \"opacity\") {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === \"size\") {\n            delete particle.bubble.radius;\n          }\n          if (type === \"opacity\") {\n            delete particle.bubble.opacity;\n          }\n        }\n      }\n    };\n    this._singleSelectorHover = (delta, selector, div) => {\n      const container = this.container,\n        selectors = document.querySelectorAll(selector),\n        bubble = container.actualOptions.interactivity.modes.bubble;\n      if (!bubble || !selectors.length) {\n        return;\n      }\n      selectors.forEach(item => {\n        const elem = item,\n          pxRatio = container.retina.pixelRatio,\n          pos = {\n            x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n            y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n          },\n          repulseRadius = elem.offsetWidth / 2 * pxRatio,\n          area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n          query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n        for (const particle of query) {\n          if (!area.contains(particle.getPosition())) {\n            continue;\n          }\n          particle.bubble.inRange = true;\n          const divs = bubble.divs,\n            divBubble = divMode(divs, elem);\n          if (!particle.bubble.div || particle.bubble.div !== elem) {\n            this.clear(particle, delta, true);\n            particle.bubble.div = elem;\n          }\n          this._hoverBubbleSize(particle, 1, divBubble);\n          this._hoverBubbleOpacity(particle, 1, divBubble);\n          this._hoverBubbleColor(particle, 1, divBubble);\n        }\n      });\n    };\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    this.handleClickMode = mode => {\n      if (mode !== \"bubble\") {\n        return;\n      }\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n      container.bubble.clicking = true;\n    };\n  }\n  clear(particle, delta, force) {\n    if (particle.bubble.inRange && !force) {\n      return;\n    }\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n  init() {\n    const container = this.container,\n      bubble = container.actualOptions.interactivity.modes.bubble;\n    if (!bubble) {\n      return;\n    }\n    container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n    if (bubble.size !== undefined) {\n      container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n    }\n  }\n  async interact(delta) {\n    const options = this.container.actualOptions,\n      events = options.interactivity.events,\n      onHover = events.onHover,\n      onClick = events.onClick,\n      hoverEnabled = onHover.enable,\n      hoverMode = onHover.mode,\n      clickEnabled = onClick.enable,\n      clickMode = onClick.mode,\n      divs = events.onDiv;\n    if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n      this._hoverBubble();\n    } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n      this._clickBubble();\n    } else {\n      divModeExecute(\"bubble\", divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n    }\n  }\n  isEnabled(particle) {\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = (particle?.interactivity ?? options.interactivity).events,\n      {\n        onClick,\n        onDiv,\n        onHover\n      } = events,\n      divBubble = isDivModeEnabled(\"bubble\", onDiv);\n    if (!(divBubble || onHover.enable && mouse.position || onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n    return isInArray(\"bubble\", onHover.mode) || isInArray(\"bubble\", onClick.mode) || divBubble;\n  }\n  loadModeOptions(options, ...sources) {\n    if (!options.bubble) {\n      options.bubble = new Bubble();\n    }\n    for (const source of sources) {\n      options.bubble.load(source?.bubble);\n    }\n  }\n  reset(particle) {\n    particle.bubble.inRange = false;\n  }\n}","map":{"version":3,"names":["Circle","ExternalInteractorBase","Rectangle","colorMix","divMode","divModeExecute","getDistance","getRangeMax","isDivModeEnabled","isInArray","itemFromSingleOrMultiple","mouseLeaveEvent","mouseMoveEvent","rangeColorToHsl","rgbToHsl","Bubble","calculateBubbleValue","Bubbler","constructor","container","_clickBubble","options","actualOptions","mouseClickPos","interactivity","mouse","clickPosition","bubbleOptions","modes","bubble","distance","retina","bubbleModeDistance","query","particles","quadTree","queryCircle","p","isEnabled","particle","clicking","inRange","durationEnd","pos","getPosition","distMouse","timeSpent","Date","getTime","clickTime","duration","sizeData","bubbleObj","optValue","bubbleModeSize","value","radius","particlesObj","size","pixelRatio","type","_process","opacityData","opacity","_hoverBubbleColor","color","_hoverBubble","mousePos","position","undefined","pointDistance","ratio","status","_hoverBubbleSize","_hoverBubbleOpacity","reset","divBubble","finalColor","modeColor","bubbleColor","mix","pColor","getFillColor","modeOpacity","optOpacity","pOpacity","modeSize","optSize","pSize","data","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","obj","_singleSelectorHover","delta","selector","div","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","contains","divs","clear","handleClickMode","mode","force","init","interact","events","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","onDiv","loadModeOptions","sources","source","load"],"sources":["C:/Users/vinayak.sharma/OneDrive - Incedo Technology Solutions Ltd/Desktop/Project/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js"],"sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\nimport { calculateBubbleValue } from \"./Utils\";\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * 2) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: \"size\",\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? 1,\n                    },\n                    type: \"opacity\",\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0 || mousePos === undefined) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? 1, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n            if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === \"size\") {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === \"opacity\") {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, 1, divBubble);\n                    this._hoverBubbleOpacity(particle, 1, divBubble);\n                    this._hoverBubbleColor(particle, 1, divBubble);\n                }\n            });\n        };\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    async interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(\"bubble\", onDiv);\n        if (!(divBubble || (onHover.enable && mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(\"bubble\", onHover.mode) || isInArray(\"bubble\", onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}